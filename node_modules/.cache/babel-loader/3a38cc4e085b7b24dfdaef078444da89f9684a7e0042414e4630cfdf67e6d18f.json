{"ast":null,"code":"var _jsxFileName = \"/Users/saake/Portfolio/src/ThreeDText.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeDText = () => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const groupRef = useRef(null);\n  const animationIdRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 200);\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true,\n      powerPreference: \"high-performance\"\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    rendererRef.current = renderer;\n\n    // Lights\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n    const pointLight = new THREE.PointLight(0xCC9933, 1, 1000);\n    pointLight.position.set(0, 0, 100);\n    scene.add(pointLight);\n\n    // Group for text\n    const group = new THREE.Group();\n    scene.add(group);\n    groupRef.current = group;\n\n    // Create 3D text using basic shapes\n    const text = \"Hi! I'm Saaketh\";\n    const letters = text.split('');\n    let currentX = 0;\n    letters.forEach((letter, index) => {\n      if (letter === ' ') {\n        currentX += 20; // Space between words\n        return;\n      }\n\n      // Create a 3D letter using basic geometry\n      let geometry;\n      if (letter === '!') {\n        // Exclamation mark - vertical rectangle\n        geometry = new THREE.BoxGeometry(8, 20, 8);\n      } else if (letter === \"'\") {\n        // Apostrophe - small cube\n        geometry = new THREE.BoxGeometry(6, 8, 6);\n      } else {\n        // Regular letters - rectangular prism\n        geometry = new THREE.BoxGeometry(12, 20, 8);\n      }\n\n      // Create material with gold color\n      const material = new THREE.MeshPhongMaterial({\n        color: 0xCC9933,\n        // Muted gold\n        transparent: true,\n        opacity: 0.9,\n        shininess: 100\n      });\n      const letterMesh = new THREE.Mesh(geometry, material);\n\n      // Position letters\n      letterMesh.position.x = currentX;\n      letterMesh.position.y = 0;\n      letterMesh.position.z = 0;\n\n      // No random rotation - letters stay perfectly straight\n      letterMesh.rotation.x = 0;\n      letterMesh.rotation.y = 0;\n      letterMesh.rotation.z = 0;\n      group.add(letterMesh);\n\n      // Update position for next letter\n      if (letter === '!') {\n        currentX += 15;\n      } else if (letter === \"'\") {\n        currentX += 12;\n      } else {\n        currentX += 18;\n      }\n    });\n\n    // Center the entire text group\n    group.position.x = -currentX / 2;\n\n    // Add to DOM\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Animation loop\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n\n      // No movement - just render the static scene\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      const currentMount = mountRef.current;\n      window.removeEventListener('resize', handleResize);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (currentMount && renderer.domElement) {\n        currentMount.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      width: '100%',\n      height: '100%',\n      zIndex: 1,\n      pointerEvents: 'none'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(ThreeDText, \"QE2YSX/KrTRu2KahOsJdVpk/z0c=\");\n_c = ThreeDText;\nexport default ThreeDText;\nvar _c;\n$RefreshReg$(_c, \"ThreeDText\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","ThreeDText","_s","mountRef","sceneRef","rendererRef","groupRef","animationIdRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","set","renderer","WebGLRenderer","alpha","antialias","powerPreference","setSize","setClearColor","setPixelRatio","Math","min","devicePixelRatio","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","pointLight","PointLight","group","Group","text","letters","split","currentX","forEach","letter","index","geometry","BoxGeometry","material","MeshPhongMaterial","color","transparent","opacity","shininess","letterMesh","Mesh","x","y","z","rotation","appendChild","domElement","animate","requestAnimationFrame","render","handleResize","aspect","updateProjectionMatrix","addEventListener","currentMount","removeEventListener","cancelAnimationFrame","removeChild","dispose","ref","style","top","left","transform","width","height","zIndex","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/saake/Portfolio/src/ThreeDText.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst ThreeDText = () => {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const groupRef = useRef(null);\n  const animationIdRef = useRef(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.set(0, 0, 200);\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({ \n      alpha: true,\n      antialias: true,\n      powerPreference: \"high-performance\"\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n    rendererRef.current = renderer;\n\n    // Lights\n    const ambientLight = new THREE.AmbientLight(0x404040, 0.6);\n    scene.add(ambientLight);\n\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(1, 1, 1);\n    scene.add(directionalLight);\n\n    const pointLight = new THREE.PointLight(0xCC9933, 1, 1000);\n    pointLight.position.set(0, 0, 100);\n    scene.add(pointLight);\n\n    // Group for text\n    const group = new THREE.Group();\n    scene.add(group);\n    groupRef.current = group;\n\n    // Create 3D text using basic shapes\n    const text = \"Hi! I'm Saaketh\";\n    const letters = text.split('');\n    let currentX = 0;\n\n    letters.forEach((letter, index) => {\n      if (letter === ' ') {\n        currentX += 20; // Space between words\n        return;\n      }\n\n      // Create a 3D letter using basic geometry\n      let geometry;\n      \n      if (letter === '!') {\n        // Exclamation mark - vertical rectangle\n        geometry = new THREE.BoxGeometry(8, 20, 8);\n      } else if (letter === \"'\") {\n        // Apostrophe - small cube\n        geometry = new THREE.BoxGeometry(6, 8, 6);\n      } else {\n        // Regular letters - rectangular prism\n        geometry = new THREE.BoxGeometry(12, 20, 8);\n      }\n\n      // Create material with gold color\n      const material = new THREE.MeshPhongMaterial({\n        color: 0xCC9933, // Muted gold\n        transparent: true,\n        opacity: 0.9,\n        shininess: 100\n      });\n\n      const letterMesh = new THREE.Mesh(geometry, material);\n      \n      // Position letters\n      letterMesh.position.x = currentX;\n      letterMesh.position.y = 0;\n      letterMesh.position.z = 0;\n\n      // No random rotation - letters stay perfectly straight\n      letterMesh.rotation.x = 0;\n      letterMesh.rotation.y = 0;\n      letterMesh.rotation.z = 0;\n\n      group.add(letterMesh);\n\n      // Update position for next letter\n      if (letter === '!') {\n        currentX += 15;\n      } else if (letter === \"'\") {\n        currentX += 12;\n      } else {\n        currentX += 18;\n      }\n    });\n\n    // Center the entire text group\n    group.position.x = -currentX / 2;\n\n    // Add to DOM\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Animation loop\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n\n      // No movement - just render the static scene\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      const currentMount = mountRef.current;\n      window.removeEventListener('resize', handleResize);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (currentMount && renderer.domElement) {\n        currentMount.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n\n  return (\n    <div \n      ref={mountRef} \n      style={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: '100%',\n        height: '100%',\n        zIndex: 1,\n        pointerEvents: 'none'\n      }}\n    />\n  );\n};\n\nexport default ThreeDText;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}