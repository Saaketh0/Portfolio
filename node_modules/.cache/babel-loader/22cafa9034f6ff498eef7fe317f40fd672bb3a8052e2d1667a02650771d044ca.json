{"ast":null,"code":"import _createClass from \"/Users/saake/Portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/saake/Portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _possibleConstructorReturn from \"/Users/saake/Portfolio/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _inherits from \"/Users/saake/Portfolio/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/saake/Portfolio/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { ExtrudeGeometry } from 'three';\n\n/**\n * A class for generating text as a single geometry. It is constructed by providing a string of text, and a set of\n * parameters consisting of a loaded font and extrude settings.\n *\n * See the {@link FontLoader} page for additional details.\n *\n * `TextGeometry` uses [typeface.json]{@link http://gero3.github.io/facetype.js/} generated fonts.\n * Some existing fonts can be found located in `/examples/fonts`.\n *\n * ```js\n * const loader = new FontLoader();\n * const font = await loader.loadAsync( 'fonts/helvetiker_regular.typeface.json' );\n * const geometry = new TextGeometry( 'Hello three.js!', {\n * \tfont: font,\n * \tsize: 80,\n * \tdepth: 5,\n * \tcurveSegments: 12\n * } );\n * ```\n *\n * @augments ExtrudeGeometry\n * @three_import import { TextGeometry } from 'three/addons/geometries/TextGeometry.js';\n */\nvar TextGeometry = /*#__PURE__*/function (_ExtrudeGeometry) {\n  _inherits(TextGeometry, _ExtrudeGeometry);\n  var _super = _createSuper(TextGeometry);\n  /**\n   * Constructs a new text geometry.\n   *\n   * @param {string} text - The text that should be transformed into a geometry.\n   * @param {TextGeometry~Options} [parameters] - The text settings.\n   */\n  function TextGeometry(text) {\n    var _this;\n    var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, TextGeometry);\n    var font = parameters.font;\n    if (font === undefined) {\n      _this = _super.call(this); // generate default extrude geometry\n    } else {\n      var shapes = font.generateShapes(text, parameters.size);\n\n      // defaults\n\n      if (parameters.depth === undefined) parameters.depth = 50;\n      if (parameters.bevelThickness === undefined) parameters.bevelThickness = 10;\n      if (parameters.bevelSize === undefined) parameters.bevelSize = 8;\n      if (parameters.bevelEnabled === undefined) parameters.bevelEnabled = false;\n      _this = _super.call(this, shapes, parameters);\n    }\n    _this.type = 'TextGeometry';\n    return _possibleConstructorReturn(_this);\n  }\n  return _createClass(TextGeometry);\n}(ExtrudeGeometry);\n/**\n * Represents the `options` type of the geometry's constructor.\n *\n * @typedef {Object} TextGeometry~Options\n * @property {Font} [font] - The font.\n * @property {number} [size=100] - The text size.\n * @property {number} [depth=50] - Depth to extrude the shape.\n * @property {number} [curveSegments=12] - Number of points on the curves.\n * @property {number} [steps=1] - Number of points used for subdividing segments along the depth of the extruded spline.\n * @property {boolean} [bevelEnabled=false] - Whether to beveling to the shape or not.\n * @property {number} [bevelThickness=10] - How deep into the original shape the bevel goes.\n * @property {number} [bevelSize=8] - Distance from the shape outline that the bevel extends.\n * @property {number} [bevelOffset=0] - Distance from the shape outline that the bevel starts.\n * @property {number} [bevelSegments=3] - Number of bevel layers.\n * @property {?Curve} [extrudePath=null] - A 3D spline path along which the shape should be extruded. Bevels not supported for path extrusion.\n * @property {Object} [UVGenerator] - An object that provides UV generator functions for custom UV generation.\n **/\nexport { TextGeometry };","map":{"version":3,"names":["ExtrudeGeometry","TextGeometry","_ExtrudeGeometry","_inherits","_super","_createSuper","text","_this","parameters","arguments","length","undefined","_classCallCheck","font","call","shapes","generateShapes","size","depth","bevelThickness","bevelSize","bevelEnabled","type","_possibleConstructorReturn","_createClass"],"sources":["/Users/saake/Portfolio/node_modules/three/examples/jsm/geometries/TextGeometry.js"],"sourcesContent":["import {\n\tExtrudeGeometry\n} from 'three';\n\n/**\n * A class for generating text as a single geometry. It is constructed by providing a string of text, and a set of\n * parameters consisting of a loaded font and extrude settings.\n *\n * See the {@link FontLoader} page for additional details.\n *\n * `TextGeometry` uses [typeface.json]{@link http://gero3.github.io/facetype.js/} generated fonts.\n * Some existing fonts can be found located in `/examples/fonts`.\n *\n * ```js\n * const loader = new FontLoader();\n * const font = await loader.loadAsync( 'fonts/helvetiker_regular.typeface.json' );\n * const geometry = new TextGeometry( 'Hello three.js!', {\n * \tfont: font,\n * \tsize: 80,\n * \tdepth: 5,\n * \tcurveSegments: 12\n * } );\n * ```\n *\n * @augments ExtrudeGeometry\n * @three_import import { TextGeometry } from 'three/addons/geometries/TextGeometry.js';\n */\nclass TextGeometry extends ExtrudeGeometry {\n\n\t/**\n\t * Constructs a new text geometry.\n\t *\n\t * @param {string} text - The text that should be transformed into a geometry.\n\t * @param {TextGeometry~Options} [parameters] - The text settings.\n\t */\n\tconstructor( text, parameters = {} ) {\n\n\t\tconst font = parameters.font;\n\n\t\tif ( font === undefined ) {\n\n\t\t\tsuper(); // generate default extrude geometry\n\n\t\t} else {\n\n\t\t\tconst shapes = font.generateShapes( text, parameters.size );\n\n\t\t\t// defaults\n\n\t\t\tif ( parameters.depth === undefined ) parameters.depth = 50;\n\t\t\tif ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;\n\t\t\tif ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;\n\t\t\tif ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;\n\n\t\t\tsuper( shapes, parameters );\n\n\t\t}\n\n\t\tthis.type = 'TextGeometry';\n\n\t}\n\n}\n\n/**\n * Represents the `options` type of the geometry's constructor.\n *\n * @typedef {Object} TextGeometry~Options\n * @property {Font} [font] - The font.\n * @property {number} [size=100] - The text size.\n * @property {number} [depth=50] - Depth to extrude the shape.\n * @property {number} [curveSegments=12] - Number of points on the curves.\n * @property {number} [steps=1] - Number of points used for subdividing segments along the depth of the extruded spline.\n * @property {boolean} [bevelEnabled=false] - Whether to beveling to the shape or not.\n * @property {number} [bevelThickness=10] - How deep into the original shape the bevel goes.\n * @property {number} [bevelSize=8] - Distance from the shape outline that the bevel extends.\n * @property {number} [bevelOffset=0] - Distance from the shape outline that the bevel starts.\n * @property {number} [bevelSegments=3] - Number of bevel layers.\n * @property {?Curve} [extrudePath=null] - A 3D spline path along which the shape should be extruded. Bevels not supported for path extrusion.\n * @property {Object} [UVGenerator] - An object that provides UV generator functions for custom UV generation.\n **/\n\nexport { TextGeometry };\n"],"mappings":";;;;;AAAA,SACCA,eAAe,QACT,OAAO;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA,IAuBMC,YAAY,0BAAAC,gBAAA;EAAAC,SAAA,CAAAF,YAAA,EAAAC,gBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,YAAA;EAEjB;AACD;AACA;AACA;AACA;AACA;EACC,SAAAA,aAAaK,IAAI,EAAoB;IAAA,IAAAC,KAAA;IAAA,IAAlBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAAG,eAAA,OAAAX,YAAA;IAEjC,IAAMY,IAAI,GAAGL,UAAU,CAACK,IAAI;IAE5B,IAAKA,IAAI,KAAKF,SAAS,EAAG;MAEzBJ,KAAA,GAAAH,MAAA,CAAAU,IAAA,OAAQ,CAAC;IAEV,CAAC,MAAM;MAEN,IAAMC,MAAM,GAAGF,IAAI,CAACG,cAAc,CAAEV,IAAI,EAAEE,UAAU,CAACS,IAAK,CAAC;;MAE3D;;MAEA,IAAKT,UAAU,CAACU,KAAK,KAAKP,SAAS,EAAGH,UAAU,CAACU,KAAK,GAAG,EAAE;MAC3D,IAAKV,UAAU,CAACW,cAAc,KAAKR,SAAS,EAAGH,UAAU,CAACW,cAAc,GAAG,EAAE;MAC7E,IAAKX,UAAU,CAACY,SAAS,KAAKT,SAAS,EAAGH,UAAU,CAACY,SAAS,GAAG,CAAC;MAClE,IAAKZ,UAAU,CAACa,YAAY,KAAKV,SAAS,EAAGH,UAAU,CAACa,YAAY,GAAG,KAAK;MAE5Ed,KAAA,GAAAH,MAAA,CAAAU,IAAA,OAAOC,MAAM,EAAEP,UAAU;IAE1B;IAEAD,KAAA,CAAKe,IAAI,GAAG,cAAc;IAAC,OAAAC,0BAAA,CAAAhB,KAAA;EAE5B;EAAC,OAAAiB,YAAA,CAAAvB,YAAA;AAAA,EAjCyBD,eAAe;AAqC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASC,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}