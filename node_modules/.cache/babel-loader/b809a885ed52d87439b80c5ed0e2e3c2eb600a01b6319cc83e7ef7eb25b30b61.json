{"ast":null,"code":"var _jsxFileName = \"/Users/saake/Portfolio/src/ParticleBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticleBackground = () => {\n  _s();\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const particlesRef = useRef(null);\n  const animationIdRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    camera.position.z = 5;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      alpha: true,\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    rendererRef.current = renderer;\n\n    // Create particles\n    const particleCount = 1000;\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n    for (let i = 0; i < particleCount * 3; i += 3) {\n      // Random positions in a sphere\n      const radius = Math.random() * 20;\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.random() * Math.PI;\n      positions[i] = radius * Math.sin(phi) * Math.cos(theta);\n      positions[i + 1] = radius * Math.sin(phi) * Math.sin(theta);\n      positions[i + 2] = radius * Math.cos(phi);\n\n      // Random colors (purple theme)\n      const colorVariations = [[0.545, 0.361, 0.961],\n      // #8b5cf6\n      [0.659, 0.333, 0.969],\n      // #a855f7\n      [0.753, 0.518, 0.988],\n      // #c084fc\n      [0.847, 0.694, 0.996],\n      // #d8b4fe\n      [0.941, 0.871, 1.000] // #f0e7ff\n      ];\n\n      const colorIndex = Math.floor(Math.random() * colorVariations.length);\n      colors[i] = colorVariations[colorIndex][0];\n      colors[i + 1] = colorVariations[colorIndex][1];\n      colors[i + 2] = colorVariations[colorIndex][2];\n    }\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n    const material = new THREE.PointsMaterial({\n      size: 0.05,\n      vertexColors: true,\n      transparent: true,\n      opacity: 0.8,\n      sizeAttenuation: true\n    });\n    const particles = new THREE.Points(geometry, material);\n    scene.add(particles);\n    particlesRef.current = particles;\n\n    // Add to DOM\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Animation loop\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n\n      // Rotate particles\n      if (particlesRef.current) {\n        particlesRef.current.rotation.x += 0.001;\n        particlesRef.current.rotation.y += 0.002;\n      }\n\n      // Move camera slightly for parallax effect\n      camera.position.x = Math.sin(Date.now() * 0.0001) * 0.5;\n      camera.position.y = Math.cos(Date.now() * 0.0001) * 0.3;\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      position: 'fixed',\n      top: 0,\n      left: 0,\n      width: '100%',\n      height: '100%',\n      zIndex: -1,\n      pointerEvents: 'none'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n};\n_s(ParticleBackground, \"sbeeRAV+uJN8DUn2LbtSdECjbsQ=\");\n_c = ParticleBackground;\nexport default ParticleBackground;\nvar _c;\n$RefreshReg$(_c, \"ParticleBackground\");","map":{"version":3,"names":["React","useEffect","useRef","THREE","jsxDEV","_jsxDEV","ParticleBackground","_s","mountRef","sceneRef","rendererRef","particlesRef","animationIdRef","current","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","z","renderer","WebGLRenderer","alpha","antialias","setSize","setClearColor","particleCount","positions","Float32Array","colors","i","radius","Math","random","theta","PI","phi","sin","cos","colorVariations","colorIndex","floor","length","geometry","BufferGeometry","setAttribute","BufferAttribute","material","PointsMaterial","size","vertexColors","transparent","opacity","sizeAttenuation","particles","Points","add","appendChild","domElement","animate","requestAnimationFrame","rotation","x","y","Date","now","render","handleResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","removeChild","dispose","ref","style","top","left","width","height","zIndex","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/saake/Portfolio/src/ParticleBackground.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\nconst ParticleBackground = () => {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const particlesRef = useRef(null);\n  const animationIdRef = useRef(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 5;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({ \n      alpha: true,\n      antialias: true \n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    rendererRef.current = renderer;\n\n    // Create particles\n    const particleCount = 1000;\n    const positions = new Float32Array(particleCount * 3);\n    const colors = new Float32Array(particleCount * 3);\n\n    for (let i = 0; i < particleCount * 3; i += 3) {\n      // Random positions in a sphere\n      const radius = Math.random() * 20;\n      const theta = Math.random() * Math.PI * 2;\n      const phi = Math.random() * Math.PI;\n\n      positions[i] = radius * Math.sin(phi) * Math.cos(theta);\n      positions[i + 1] = radius * Math.sin(phi) * Math.sin(theta);\n      positions[i + 2] = radius * Math.cos(phi);\n\n      // Random colors (purple theme)\n      const colorVariations = [\n        [0.545, 0.361, 0.961], // #8b5cf6\n        [0.659, 0.333, 0.969], // #a855f7\n        [0.753, 0.518, 0.988], // #c084fc\n        [0.847, 0.694, 0.996], // #d8b4fe\n        [0.941, 0.871, 1.000]  // #f0e7ff\n      ];\n      const colorIndex = Math.floor(Math.random() * colorVariations.length);\n      colors[i] = colorVariations[colorIndex][0];\n      colors[i + 1] = colorVariations[colorIndex][1];\n      colors[i + 2] = colorVariations[colorIndex][2];\n    }\n\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));\n\n    const material = new THREE.PointsMaterial({\n      size: 0.05,\n      vertexColors: true,\n      transparent: true,\n      opacity: 0.8,\n      sizeAttenuation: true\n    });\n\n    const particles = new THREE.Points(geometry, material);\n    scene.add(particles);\n    particlesRef.current = particles;\n\n    // Add to DOM\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Animation loop\n    const animate = () => {\n      animationIdRef.current = requestAnimationFrame(animate);\n\n      // Rotate particles\n      if (particlesRef.current) {\n        particlesRef.current.rotation.x += 0.001;\n        particlesRef.current.rotation.y += 0.002;\n      }\n\n      // Move camera slightly for parallax effect\n      camera.position.x = Math.sin(Date.now() * 0.0001) * 0.5;\n      camera.position.y = Math.cos(Date.now() * 0.0001) * 0.3;\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      renderer.dispose();\n    };\n  }, []);\n\n  return (\n    <div \n      ref={mountRef} \n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n        zIndex: -1,\n        pointerEvents: 'none'\n      }}\n    />\n  );\n};\n\nexport default ParticleBackground;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}